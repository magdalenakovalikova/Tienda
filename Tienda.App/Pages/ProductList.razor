@* @page "/products" *@
@inject ProductService ProductService
@using Tienda.App.Services
@using Tienda.Shared.Models

@* <PageTitle>Product List</PageTitle> *@

<h3>Product List</h3>

@if (products == null)
{
    <p>Loading...</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Price</th>
                <th>Size</th>
                <th>Color</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in products)
            {
                <tr style="display: @(editingProductIds.Contains(product.Id) ? "none" : "table-row")">
                    <td>@product.Name</td>
                    <td>@product.Price</td>
                    <td>@product.Size</td>
                    <td>@product.Color</td>
                    <td>
                        <button @onclick="() => ToggleEditing(product.Id)">Edit</button>
                        <button @onclick="() => DeleteProduct(product.Id)">Delete</button>
                    </td>
                </tr>
                <tr style="display: @(editingProductIds.Contains(product.Id) ? "table-row" : "none")">
                    <td><input @bind="product.Name" /></td>
                    <td><input type="number" @bind="product.Price" /></td>
                    <td><input @bind="product.Size" /></td>
                    <td><input @bind="product.Color" /></td>
                    <td>
                        <button @onclick="() => UpdateProduct(product)">Save</button>
                        @* <button @onclick="() => DeleteProduct(product.Id)">Delete</button> *@
                    </td>
                </tr>

            }
        </tbody>
    </table>

    <h4>Add Product</h4>
    <input @bind="newProduct.Name" placeholder="Name" />
    <input @bind="newProduct.Price" type="number" placeholder="Price" />
    <input @bind="newProduct.Size" placeholder="Size" />
    <input @bind="newProduct.Color" placeholder="Color" />
    <button @onclick="AddProduct">Add</button>
}

@code {
    private List<ProductDto> products = [];
    private ProductDto newProduct = new();

    protected override async Task OnInitializedAsync()
    {     
        products = await ProductService.GetProducts() ?? [];
    }
    
    private HashSet<Guid> editingProductIds = new();

    private void ToggleEditing(Guid id){
        @* editingProductIds.Clear(); *@
        if (editingProductIds.Contains(id))
            editingProductIds.Remove(id);
        else
            editingProductIds.Add(id);
    }

    private async Task AddProduct()
    {
        await ProductService.CreateProduct(newProduct);     
        products = await ProductService.GetProducts() ?? [];
    }

    private async Task DeleteProduct(Guid id)
    {
        await ProductService.DeleteProduct(id);
        products = await ProductService.GetProducts() ?? [];
    }

    private async Task UpdateProduct(ProductDto product)
    {
        Console.WriteLine(product);

        await ProductService.UpdateProduct(product);
        
        products = await ProductService.GetProducts() ?? [];

        ToggleEditing(product.Id);
    }
}
